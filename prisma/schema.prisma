generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model billing_adresses {
  id            String  @id @default(cuid()) @db.VarChar(255)
  user_id       String
  firstname     String? @db.VarChar(255)
  lastname      String? @db.VarChar(255)
  company_name  String? @db.VarChar(255)
  adress_line_1 String  @db.VarChar(255)
  adress_line_2 String? @db.VarChar(255)
  zipcode       String  @db.VarChar(255)
  country       String  @db.VarChar(255)
  state         String? @db.VarChar(255)
  phone         String? @db.VarChar(255)
  city          String  @db.VarChar(255)
  tax_id        String? @db.VarChar(255)
  invoice_email String  @db.Text
  user          User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User_BILLING_ADRESSES")

  @@index([user_id], map: "User_BILLING_ADRESSES")
}

model payment_providers {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  payments payments[]
}

model payments {
  id                   String            @id @default(cuid()) @db.VarChar(255)
  User_id              String
  payment_providers_id Int
  provider_payment_id  String            @db.VarChar(255)
  product_type         String            @db.VarChar(255)
  product_id           Int
  tax_value            Decimal           @db.Decimal(10, 0)
  tax_percent          Int
  total_price          Decimal           @db.Decimal(10, 0)
  user                 User              @relation(fields: [User_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User_PAYMENTS")
  payment_providers    payment_providers @relation(fields: [payment_providers_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "PAYMENT_PROVIDERS_PAYMENTS")

  @@index([payment_providers_id], map: "PAYMENT_PROVIDERS_PAYMENTS")
  @@index([User_id], map: "User_PAYMENTS")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(255)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id               String             @id @default(cuid()) @db.VarChar(255)
  email            String?            @unique @db.VarChar(255)
  emailVerified    DateTime?
  image            String?            @db.VarChar(255)
  createdAt        DateTime?          @db.Timestamp(0)
  updatedAt        DateTime?          @db.Timestamp(0)
  disabled         Boolean?
  name             String?            @db.VarChar(191)
  password         String?            @db.VarChar(255)
  accounts         Account[]
  sessions         Session[]
  billing_adresses billing_adresses[]
  payments         payments[]
  role             String?            @default("user") @db.VarChar(30)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model product_categories {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(191)
  proxmox_product     proxmox_product[]
  pterodactyl_product pterodactyl_product[]
}

model proxmox_hosts {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(191)
  max_cpu         Int
  max_ram         Int
  max_disk        Int
  proxmox_product proxmox_product[]
}

model proxmox_product {
  id                    Int                @id @default(autoincrement())
  proxmox_hosts_id      Int
  product_categories_id Int
  price_per_hour        Decimal            @db.Decimal(10, 4)
  name                  String             @db.VarChar(191)
  cpu_cores             Int
  memory                Int
  minimum_memory        Int
  disk_size             Int
  cpu_bllooning         Boolean
  product_categories    product_categories @relation(fields: [product_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_categories_proxmox_product")
  proxmox_hosts         proxmox_hosts      @relation(fields: [proxmox_hosts_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proxmox_hosts_proxmox_product")

  @@index([product_categories_id], map: "product_categories_proxmox_product")
  @@index([proxmox_hosts_id], map: "proxmox_hosts_proxmox_product")
}

model pterodactyl_product {
  id                    Int                @id @default(autoincrement())
  product_categories_id Int
  name                  Bytes              @db.VarBinary(255)
  price_per_hour        Decimal            @db.Decimal(10, 4)
  memory                Int
  cpu                   Int
  disk_storage          Int
  block_io_weight       Int
  db_limit              Int
  allocation_limit      Int
  backup_limit          Int
  product_categories    product_categories @relation(fields: [product_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_categories_pterodactyl_product")

  @@index([product_categories_id], map: "product_categories_pterodactyl_product")
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  output                   = "../prisma/schema.json"
  persistOriginalType      = "true"
  keepRelationScalarFields = "true"
}
